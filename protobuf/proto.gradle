apply plugin: 'com.android.library'
apply plugin: 'com.google.protobuf'
apply from: "../config.gradle"

/*
 * For usage and examples see README.md
 */

task prepareAppodealProtobuf_helper(type: Zip, group: 'jar') {
    destinationDir projectDir
    1.times { archiveName sprintf('../protobuf/libs/protobuf-3.0.2.jar') }
    from({ zipTree(new File(projectDir, '../protobuf/libs-source/protobuf-java-3.0.2.jar')) }) {
        include '**'
    }
}

task prepareAppodealProtobuf(dependsOn: prepareAppodealProtobuf_helper, type: JavaExec, group: 'jar') {
    workingDir projectDir
    main = "-jar"
    args = [
            "../protobuf/jarjar-1.4.jar",
            "process",
            "../protobuf/jarjar_rules.txt",
            sprintf("../protobuf/libs-source/protobuf-java-3.0.2.jar"),
            sprintf("../protobuf/libs/protobuf-3.0.2.jar")
    ]
}

task repackJar << {
    println("repackJar running... ${project.name}")
    def repackedJarPackage = gradle.ext.has("protoJarPackage") ?
            gradle.ext.protoJarPackage : "com.appodeal.protobuf"
    def jarjarRulesFile = new File("${project.parent.projectDir}/protobuf/jarjar_rules.txt")
    jarjarRulesFile.text = "rule com.google.protobuf.** $repackedJarPackage.@1\n" +
            "rule google.protobuf.** $repackedJarPackage.@1"
    def repackedLibFile = new File("${project.parent.projectDir}/protobuf/libs/protobuf-3.0.2.jar")
    if (!repackedLibFile.exists()) {
        delete new File("${project.parent.projectDir}/protobuf/libs")
        prepareAppodealProtobuf_helper.execute()
        prepareAppodealProtobuf.execute()
    }
}

repackJar.execute()

repositories {
    jcenter()
    mavenLocal()
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.0.0'
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {}
            }
            task.doLast {
                println("Proto: generate task start (projectDir = ${projectDir}, " +
                        "protoOutputDir = ${protobuf.generatedFilesBaseDir})")
                protobufCompiledFileRename.execute()
                repackJar.execute()
            }
        }
    }
}

android {
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    compileOnly 'com.google.protobuf:protobuf-java:3.0.2'
}

task protobufCompiledFileRename << {
    println("Proto: rename task start")
    def renameFrom = gradle.ext.has("protoJavaPackageFrom") ?
            gradle.ext.protoJavaPackageFrom : null
    def renameTo = (gradle.ext.has("protoJavaPackageTo")) ?
            gradle.ext.protoJavaPackageTo : null
    if (new File(protobuf.generatedFilesBaseDir).exists()) {
        ant.replaceregexp(
                match: 'com.google.protobuf.',
                replace: 'com.appodeal.protobuf.',
                flags: 'g',
                byline: true) {
            fileset(dir: protobuf.generatedFilesBaseDir)
        }
        if (renameFrom != null && renameTo != null) {
            println("custom rename start: ${renameFrom} -> ${renameTo}")
            ant.replaceregexp(
                    match: "${renameFrom}",
                    replace: "${renameTo}",
                    flags: 'g',
                    byline: true) {
                fileset(dir: protobuf.generatedFilesBaseDir)
            }
        } else {
            println("Proto: renaming skipped (no valuse provided)")
        }
        println("Proto: rename task finish")
    } else {
        println("Proto: dir not found: ${protobuf.generatedFilesBaseDir}")
    }
}

clean {
    delete protobuf.generatedFilesBaseDir
}